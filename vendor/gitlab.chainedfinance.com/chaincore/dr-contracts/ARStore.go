// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// ArStoreABI is the input ABI used to generate the binding from.
const ArStoreABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"inputAddress\",\"type\":\"address\"}],\"name\":\"addValidAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"companyId\",\"type\":\"string\"},{\"name\":\"otherCompanyInfo\",\"type\":\"string\"}],\"name\":\"updateCompanyInfo\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"arId\",\"type\":\"string\"}],\"name\":\"checkARId\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"companyId\",\"type\":\"string\"}],\"name\":\"queryCompanyInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractNo\",\"type\":\"string\"},{\"name\":\"otherContractInfo\",\"type\":\"string\"}],\"name\":\"addContract\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contractNo\",\"type\":\"string\"}],\"name\":\"checkContractNo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"payId\",\"type\":\"string\"}],\"name\":\"checkPayId\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"companyId\",\"type\":\"string\"},{\"name\":\"otherCompanyInfo\",\"type\":\"string\"}],\"name\":\"addCompany\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"inputAddress\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"arId\",\"type\":\"string\"}],\"name\":\"queryArInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"payId\",\"type\":\"string\"}],\"name\":\"queryPaymentTx\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"payId\",\"type\":\"string\"},{\"name\":\"otherARPayInfo\",\"type\":\"string\"}],\"name\":\"payByAR\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"discountId\",\"type\":\"string\"},{\"name\":\"otherDiscountInfo\",\"type\":\"string\"}],\"name\":\"discountByAR\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"inputAddress\",\"type\":\"address\"}],\"name\":\"queryValidAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"discountId\",\"type\":\"string\"},{\"name\":\"otherDiscountInfo\",\"type\":\"string\"}],\"name\":\"updateDiscountInfoOfAR\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"payId\",\"type\":\"string\"},{\"name\":\"otherARPayInfo\",\"type\":\"string\"}],\"name\":\"updatePaymentInfoOfAR\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"inputAddress\",\"type\":\"address\"}],\"name\":\"deleteValidAddress\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contractNo\",\"type\":\"string\"}],\"name\":\"queryContractInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"discountId\",\"type\":\"string\"}],\"name\":\"queryDiscountTx\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"companyId\",\"type\":\"string\"}],\"name\":\"checkCompanyId\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"arId\",\"type\":\"string\"},{\"name\":\"otherARInfo\",\"type\":\"string\"}],\"name\":\"createAR\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"arId\",\"type\":\"string\"},{\"name\":\"otherARInfo\",\"type\":\"string\"}],\"name\":\"updateARInfo\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"discountId\",\"type\":\"string\"}],\"name\":\"checkDiscountId\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userId\",\"type\":\"uint256\"},{\"name\":\"bcAccount\",\"type\":\"string\"},{\"name\":\"userInfo\",\"type\":\"string\"}],\"name\":\"accountRegister\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userId\",\"type\":\"uint256\"}],\"name\":\"checkUserId\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractNo\",\"type\":\"string\"},{\"name\":\"otherContractInfo\",\"type\":\"string\"}],\"name\":\"updateContractInfo\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"adminAccount\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bcAccount\",\"type\":\"string\"}],\"name\":\"RegisterUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"arId\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"otherARInfo\",\"type\":\"string\"}],\"name\":\"CreateAR\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"payId\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"otherARPayInfo\",\"type\":\"string\"}],\"name\":\"ARPay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"discountId\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"otherDiscountInfo\",\"type\":\"string\"}],\"name\":\"ARDiscount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractNo\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"otherContractInfo\",\"type\":\"string\"}],\"name\":\"AddContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"companyId\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"otherCompanyInfo\",\"type\":\"string\"}],\"name\":\"AddCompany\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"discountId\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"otherDiscountInfo\",\"type\":\"string\"}],\"name\":\"ARDiscountTxUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"payId\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"otherARPayInfo\",\"type\":\"string\"}],\"name\":\"ARPaymentTxUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"arId\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"otherARInfo\",\"type\":\"string\"}],\"name\":\"ARInfoUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractNo\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"otherContractInfo\",\"type\":\"string\"}],\"name\":\"ContractInfoUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"companyId\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"otherCompanyInfo\",\"type\":\"string\"}],\"name\":\"CompanyInfoUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"inputAddress\",\"type\":\"address\"}],\"name\":\"AddValidAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"inputAddress\",\"type\":\"address\"}],\"name\":\"DeleteValidAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"inputAddress\",\"type\":\"address\"}],\"name\":\"AddAdmin\",\"type\":\"event\"}]"

// ArStoreBin is the compiled bytecode used for deploying new contracts.
const ArStoreBin = `0x6060604052341561000f57600080fd5b604051602080612d98833981016040528080519150505b600160a060020a038116600090815260016020818152604080842083905590839052909120555b505b612d3a8061005e6000396000f300606060405236156101515763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302bb62e381146101565780631a0a6c68146101775780631b625eff146101a35780633dc904a114610208578063490617571461033c578063556d3fc1146103685780635724a9ef146103cd5780636559c31014610432578063704802751461045e578063735d40d41461047f57806374cd21c4146105b3578063849a84de146106e757806386672ae0146107135780638aade3031461073f578063a090a0a814610772578063aa86c09e1461079e578063aab0205d146107ca578063adbe6459146107eb578063afac40861461091f578063c73ac75014610a53578063d627325e14610ab8578063dc527b1a14610ae4578063dc6e6ec614610b10578063e493e20714610b75578063e4f36ec814610ba5578063fe5d552d14610bcf575b600080fd5b341561016157600080fd5b610175600160a060020a0360043516610bfb565b005b341561018257600080fd5b6101756024600480358281019290820135918135918201910135610ca7565b005b34156101ae57600080fd5b6101f460046024813581810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610dbd95505050505050565b604051901515815260200160405180910390f35b341561021357600080fd5b61025960046024813581810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610e4495505050505050565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561029b5780820151818401525b602001610282565b50505050905090810190601f1680156102c85780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156102ff5780820151818401525b6020016102e6565b50505050905090810190601f16801561032c5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b341561034757600080fd5b610175602460048035828101929082013591813591820191013561108f565b005b341561037357600080fd5b6101f460046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061123c95505050505050565b604051901515815260200160405180910390f35b34156103d857600080fd5b6101f460046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506112c395505050505050565b604051901515815260200160405180910390f35b341561043d57600080fd5b610175602460048035828101929082013591813591820191013561134a565b005b341561046957600080fd5b610175600160a060020a03600435166114f7565b005b341561048a57600080fd5b61025960046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506115ad95505050505050565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561029b5780820151818401525b602001610282565b50505050905090810190601f1680156102c85780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156102ff5780820151818401525b6020016102e6565b50505050905090810190601f16801561032c5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34156105be57600080fd5b61025960046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506117f895505050505050565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561029b5780820151818401525b602001610282565b50505050905090810190601f1680156102c85780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156102ff5780820151818401525b6020016102e6565b50505050905090810190601f16801561032c5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34156106f257600080fd5b6101756024600480358281019290820135918135918201910135611a43565b005b341561071e57600080fd5b6101756024600480358281019290820135918135918201910135611bf0565b005b341561074a57600080fd5b6101f4600160a060020a0360043516611d9d565b604051901515815260200160405180910390f35b341561077d57600080fd5b6101756024600480358281019290820135918135918201910135611dbf565b005b34156107a957600080fd5b6101756024600480358281019290820135918135918201910135611ed5565b005b34156107d557600080fd5b610175600160a060020a0360043516611feb565b005b34156107f657600080fd5b61025960046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061209495505050505050565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561029b5780820151818401525b602001610282565b50505050905090810190601f1680156102c85780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156102ff5780820151818401525b6020016102e6565b50505050905090810190601f16801561032c5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b341561092a57600080fd5b61025960046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506122df95505050505050565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561029b5780820151818401525b602001610282565b50505050905090810190601f1680156102c85780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156102ff5780820151818401525b6020016102e6565b50505050905090810190601f16801561032c5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b3415610a5e57600080fd5b6101f460046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061252a95505050505050565b604051901515815260200160405180910390f35b3415610ac357600080fd5b61017560246004803582810192908201359181359182019101356125b1565b005b3415610aef57600080fd5b610175602460048035828101929082013591813591820191013561275e565b005b3415610b1b57600080fd5b6101f460046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061287495505050505050565b604051901515815260200160405180910390f35b3415610b8057600080fd5b6101756004803590602480358082019290810135916044359081019101356128fb565b005b3415610bb057600080fd5b6101f4600435612a9d565b604051901515815260200160405180910390f35b3415610bda57600080fd5b6101756024600480358281019290820135918135918201910135612ac7565b005b600160a060020a03331660009081526001602081905260409091205414610c2157600080fd5b600160a060020a03811660009081526020819052604090205460011415610c4757600080fd5b600160a060020a03811660009081526020819052604090819020600190557ffd99d369d59043ec7e7e684eb3b64fb389349bb7f358b45d2488486186096c8890829051600160a060020a03909116815260200160405180910390a15b5b50565b600160a060020a033316600090815260208190526040902054600114610ccc57600080fd5b600384846040518083838082843782019150509250505090815260200160405190819003902054600260001961010060018416150201909116041515610d1157600080fd5b8181600386866040518083838082843782019150509250505090815260200160405180910390206001019190610d48929190612bdd565b507fc5d4c08e7ddc547a2cc0c88249f55ca6f79db43f6b05cb9a9b426bea829384e68484848460405160408082528101849052806020810160608201878780828437909101848103835285815260200190508585808284378201915050965050505050505060405180910390a15b5b50505050565b60006002826040518082805190602001908083835b60208310610df257805182525b601f199092019160209182019101610dd2565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040519081900390205460026000196101006001841615020190911604151590505b919050565b610e4c612c5c565b610e54612c5c565b60006003846040518082805190602001908083835b60208310610e8957805182525b601f199092019160209182019101610e69565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405190819003902054600260001961010060018416150201909116041515610edc57600080fd5b6003846040518082805190602001908083835b60208310610f0f57805182525b601f199092019160209182019101610eef565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902090508060000181600101818054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610fe15780601f10610fb657610100808354040283529160200191610fe1565b820191906000526020600020905b815481529060010190602001808311610fc457829003601f168201915b50505050509150808054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561107d5780601f106110525761010080835404028352916020019161107d565b820191906000526020600020905b81548152906001019060200180831161106057829003601f168201915b50505050509050925092505b50915091565b600160a060020a0333166000908152602081905260409020546001146110b457600080fd5b60048484604051808383808284378201915050925050509081526020016040519081900390205460026000196101006001841615020190911604156110f857600080fd5b604080519081016040528085858080601f0160208091040260200160405190810160405281815292919060208401838380828437820191505050505050815260200183838080601f016020809104026020016040519081016040528181529291906020840183838082843782019150505050505081525060048585604051808383808284378201915050925050509081526020016040519081900390208151819080516111a9929160200190612c6e565b506020820151816001019080516111c4929160200190612c6e565b509050507f516729973459e4298de976b6e109f87200dce20f85caa6cadb58afd5aca2a4158484848460405160408082528101849052806020810160608201878780828437909101848103835285815260200190508585808284378201915050965050505050505060405180910390a15b5b50505050565b60006004826040518082805190602001908083835b60208310610df257805182525b601f199092019160209182019101610dd2565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040519081900390205460026000196101006001841615020190911604151590505b919050565b60006005826040518082805190602001908083835b60208310610df257805182525b601f199092019160209182019101610dd2565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040519081900390205460026000196101006001841615020190911604151590505b919050565b600160a060020a03331660009081526020819052604090205460011461136f57600080fd5b60038484604051808383808284378201915050925050509081526020016040519081900390205460026000196101006001841615020190911604156113b357600080fd5b604080519081016040528085858080601f0160208091040260200160405190810160405281815292919060208401838380828437820191505050505050815260200183838080601f01602080910402602001604051908101604052818152929190602084018383808284378201915050505050508152506003858560405180838380828437820191505092505050908152602001604051908190039020815181908051611464929160200190612c6e565b5060208201518160010190805161147f929160200190612c6e565b509050507f4da365beff783759f53b7fb0227cf09776d94a116be497d8c967223d38740c738484848460405160408082528101849052806020810160608201878780828437909101848103835285815260200190508585808284378201915050965050505050505060405180910390a15b5b50505050565b600160a060020a0333166000908152600160208190526040909120541461151d57600080fd5b600160a060020a038116600090815260016020819052604090912054141561154457600080fd5b600160a060020a03811660009081526001602081815260408084208390559083905291829020557fad6de4452a631e641cb59902236607946ce9272b9b981f2f80e8d129cb9084ba90829051600160a060020a03909116815260200160405180910390a15b5b50565b6115b5612c5c565b6115bd612c5c565b60006002846040518082805190602001908083835b602083106115f257805182525b601f1990920191602091820191016115d2565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040519081900390205460026000196101006001841615020190911604151561164557600080fd5b6002846040518082805190602001908083835b60208310610f0f57805182525b601f199092019160209182019101610eef565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902090508060000181600101818054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610fe15780601f10610fb657610100808354040283529160200191610fe1565b820191906000526020600020905b815481529060010190602001808311610fc457829003601f168201915b50505050509150808054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561107d5780601f106110525761010080835404028352916020019161107d565b820191906000526020600020905b81548152906001019060200180831161106057829003601f168201915b50505050509050925092505b50915091565b611800612c5c565b611808612c5c565b60006005846040518082805190602001908083835b6020831061183d57805182525b601f19909201916020918201910161181d565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040519081900390205460026000196101006001841615020190911604151561189057600080fd5b6005846040518082805190602001908083835b60208310610f0f57805182525b601f199092019160209182019101610eef565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902090508060000181600101818054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610fe15780601f10610fb657610100808354040283529160200191610fe1565b820191906000526020600020905b815481529060010190602001808311610fc457829003601f168201915b50505050509150808054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561107d5780601f106110525761010080835404028352916020019161107d565b820191906000526020600020905b81548152906001019060200180831161106057829003601f168201915b50505050509050925092505b50915091565b600160a060020a033316600090815260208190526040902054600114611a6857600080fd5b6005848460405180838380828437820191505092505050908152602001604051908190039020546002600019610100600184161502019091160415611aac57600080fd5b604080519081016040528085858080601f0160208091040260200160405190810160405281815292919060208401838380828437820191505050505050815260200183838080601f01602080910402602001604051908101604052818152929190602084018383808284378201915050505050508152506005858560405180838380828437820191505092505050908152602001604051908190039020815181908051611b5d929160200190612c6e565b50602082015181600101908051611b78929160200190612c6e565b509050507fde6e0d80d761e7ca1ca83e4e4d8c7e2f4aa2318bf51dfbfe95d36b9aa2808c468484848460405160408082528101849052806020810160608201878780828437909101848103835285815260200190508585808284378201915050965050505050505060405180910390a15b5b50505050565b600160a060020a033316600090815260208190526040902054600114611c1557600080fd5b6006848460405180838380828437820191505092505050908152602001604051908190039020546002600019610100600184161502019091160415611c5957600080fd5b604080519081016040528085858080601f0160208091040260200160405190810160405281815292919060208401838380828437820191505050505050815260200183838080601f01602080910402602001604051908101604052818152929190602084018383808284378201915050505050508152506006858560405180838380828437820191505092505050908152602001604051908190039020815181908051611d0a929160200190612c6e565b50602082015181600101908051611d25929160200190612c6e565b509050507fee6188daa001b6adba3924f5aef1e43bbb3894d70c7e26c5376d54a9cdd6329f8484848460405160408082528101849052806020810160608201878780828437909101848103835285815260200190508585808284378201915050965050505050505060405180910390a15b5b50505050565b600160a060020a0381166000908152602081905260409020546001145b919050565b600160a060020a033316600090815260208190526040902054600114611de457600080fd5b600684846040518083838082843782019150509250505090815260200160405190819003902054600260001961010060018416150201909116041515611e2957600080fd5b8181600686866040518083838082843782019150509250505090815260200160405180910390206001019190611e60929190612bdd565b507fa63efca52b1b290c061dbda267833fd5f7ab0e823c41b484dde98b5fafd15c888484848460405160408082528101849052806020810160608201878780828437909101848103835285815260200190508585808284378201915050965050505050505060405180910390a15b5b50505050565b600160a060020a033316600090815260208190526040902054600114611efa57600080fd5b600584846040518083838082843782019150509250505090815260200160405190819003902054600260001961010060018416150201909116041515611f3f57600080fd5b8181600586866040518083838082843782019150509250505090815260200160405180910390206001019190611f76929190612bdd565b507fd3be6a47b550b0ca84c64b6de4a62e30572a14922fce33b89da9e777923e89d38484848460405160408082528101849052806020810160608201878780828437909101848103835285815260200190508585808284378201915050965050505050505060405180910390a15b5b50505050565b600160a060020a0333166000908152600160208190526040909120541461201157600080fd5b600160a060020a038116600090815260208190526040902054151561203557600080fd5b600160a060020a038116600090815260208190526040808220919091557f5e5a76e40608b1afeb1f23102c29b95893963e9d64e803d2d7fa5604381525f190829051600160a060020a03909116815260200160405180910390a15b5b50565b61209c612c5c565b6120a4612c5c565b60006004846040518082805190602001908083835b602083106120d957805182525b601f1990920191602091820191016120b9565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040519081900390205460026000196101006001841615020190911604151561212c57600080fd5b6004846040518082805190602001908083835b60208310610f0f57805182525b601f199092019160209182019101610eef565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902090508060000181600101818054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610fe15780601f10610fb657610100808354040283529160200191610fe1565b820191906000526020600020905b815481529060010190602001808311610fc457829003601f168201915b50505050509150808054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561107d5780601f106110525761010080835404028352916020019161107d565b820191906000526020600020905b81548152906001019060200180831161106057829003601f168201915b50505050509050925092505b50915091565b6122e7612c5c565b6122ef612c5c565b60006006846040518082805190602001908083835b6020831061232457805182525b601f199092019160209182019101612304565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040519081900390205460026000196101006001841615020190911604151561237757600080fd5b6006846040518082805190602001908083835b60208310610f0f57805182525b601f199092019160209182019101610eef565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902090508060000181600101818054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610fe15780601f10610fb657610100808354040283529160200191610fe1565b820191906000526020600020905b815481529060010190602001808311610fc457829003601f168201915b50505050509150808054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561107d5780601f106110525761010080835404028352916020019161107d565b820191906000526020600020905b81548152906001019060200180831161106057829003601f168201915b50505050509050925092505b50915091565b60006003826040518082805190602001908083835b60208310610df257805182525b601f199092019160209182019101610dd2565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040519081900390205460026000196101006001841615020190911604151590505b919050565b600160a060020a0333166000908152602081905260409020546001146125d657600080fd5b600284846040518083838082843782019150509250505090815260200160405190819003902054600260001961010060018416150201909116041561261a57600080fd5b604080519081016040528085858080601f0160208091040260200160405190810160405281815292919060208401838380828437820191505050505050815260200183838080601f016020809104026020016040519081016040528181529291906020840183838082843782019150505050505081525060028585604051808383808284378201915050925050509081526020016040519081900390208151819080516126cb929160200190612c6e565b506020820151816001019080516126e6929160200190612c6e565b509050507f05d2736ab72b013950666611bf9f68c9f4736b6033f081a04c2f9ac7cb8d52b68484848460405160408082528101849052806020810160608201878780828437909101848103835285815260200190508585808284378201915050965050505050505060405180910390a15b5b50505050565b600160a060020a03331660009081526020819052604090205460011461278357600080fd5b6002848460405180838380828437820191505092505050908152602001604051908190039020546002600019610100600184161502019091160415156127c857600080fd5b81816002868660405180838380828437820191505092505050908152602001604051809103902060010191906127ff929190612bdd565b507f5825912fe71c9873e5908194054f98265d4c946e7b6486e4b2789010dff865408484848460405160408082528101849052806020810160608201878780828437909101848103835285815260200190508585808284378201915050965050505050505060405180910390a15b5b50505050565b60006006826040518082805190602001908083835b60208310610df257805182525b601f199092019160209182019101610dd2565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040519081900390205460026000196101006001841615020190911604151590505b919050565b600160a060020a03331660009081526020819052604090205460011461292057600080fd5b6000858152600860205260409020546002600019610100600184161502019091160415158061298c575060078484604051808383808284378201915050925050509081526020016040518091039020600101805460018160011615610100020316600290049050600014155b151561299757600080fd5b604080519081016040528086815260200183838080601f0160208091040260200160405190810160405281815292919060208401838380828437820191505050505050815250600785856040518083838082843782019150509250505090815260200160405190819003902081518155602082015181600101908051612a21929160200190612c6e565b5050506000858152600860205260409020612a3d908585612bdd565b507f9874e7900655ffbb5f0695e6cc0651dddacda6f7b3a5d05857c11cf4bc5316de85858560405183815260406020820181815290820183905260608201848480828437820191505094505050505060405180910390a15b5b5050505050565b6000818152600860205260409020546002600019610100600184161502019091160415155b919050565b600160a060020a033316600090815260208190526040902054600114612aec57600080fd5b600484846040518083838082843782019150509250505090815260200160405190819003902054600260001961010060018416150201909116041515612b3157600080fd5b8181600486866040518083838082843782019150509250505090815260200160405180910390206001019190612b68929190612bdd565b507ff9d4226c2fb9d76fcdb373d47ab8e58acbd70b9c4c1f94792cad9d6de3fc612e8484848460405160408082528101849052806020810160608201878780828437909101848103835285815260200190508585808284378201915050965050505050505060405180910390a15b5b50505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612c1e5782800160ff19823516178555612c4b565b82800160010185558215612c4b579182015b82811115612c4b578235825591602001919060010190612c30565b5b50612c58929150612ced565b5090565b60206040519081016040526000815290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612caf57805160ff1916838001178555612c4b565b82800160010185558215612c4b579182015b82811115612c4b578251825591602001919060010190612cc1565b5b50612c58929150612ced565b5090565b612d0b91905b80821115612c585760008155600101612cf3565b5090565b905600a165627a7a72305820858c575be92b386d40bf4c8882eac34e1d4fc57c982107253c4c303457582dca0029`

// DeployArStore deploys a new Ethereum contract, binding an instance of ArStore to it.
func DeployArStore(auth *bind.TransactOpts, backend bind.ContractBackend, adminAccount common.Address) (common.Address, *types.Transaction, *ArStore, error) {
	parsed, err := abi.JSON(strings.NewReader(ArStoreABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ArStoreBin), backend, adminAccount)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ArStore{ArStoreCaller: ArStoreCaller{contract: contract}, ArStoreTransactor: ArStoreTransactor{contract: contract}, ArStoreFilterer: ArStoreFilterer{contract: contract}}, nil
}

// ArStore is an auto generated Go binding around an Ethereum contract.
type ArStore struct {
	ArStoreCaller     // Read-only binding to the contract
	ArStoreTransactor // Write-only binding to the contract
	ArStoreFilterer   // Log filterer for contract events
}

// ArStoreCaller is an auto generated read-only Go binding around an Ethereum contract.
type ArStoreCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArStoreTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ArStoreTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArStoreFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ArStoreFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ArStoreSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ArStoreSession struct {
	Contract     *ArStore          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ArStoreCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ArStoreCallerSession struct {
	Contract *ArStoreCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// ArStoreTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ArStoreTransactorSession struct {
	Contract     *ArStoreTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ArStoreRaw is an auto generated low-level Go binding around an Ethereum contract.
type ArStoreRaw struct {
	Contract *ArStore // Generic contract binding to access the raw methods on
}

// ArStoreCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ArStoreCallerRaw struct {
	Contract *ArStoreCaller // Generic read-only contract binding to access the raw methods on
}

// ArStoreTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ArStoreTransactorRaw struct {
	Contract *ArStoreTransactor // Generic write-only contract binding to access the raw methods on
}

// NewArStore creates a new instance of ArStore, bound to a specific deployed contract.
func NewArStore(address common.Address, backend bind.ContractBackend) (*ArStore, error) {
	contract, err := bindArStore(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ArStore{ArStoreCaller: ArStoreCaller{contract: contract}, ArStoreTransactor: ArStoreTransactor{contract: contract}, ArStoreFilterer: ArStoreFilterer{contract: contract}}, nil
}

// NewArStoreCaller creates a new read-only instance of ArStore, bound to a specific deployed contract.
func NewArStoreCaller(address common.Address, caller bind.ContractCaller) (*ArStoreCaller, error) {
	contract, err := bindArStore(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ArStoreCaller{contract: contract}, nil
}

// NewArStoreTransactor creates a new write-only instance of ArStore, bound to a specific deployed contract.
func NewArStoreTransactor(address common.Address, transactor bind.ContractTransactor) (*ArStoreTransactor, error) {
	contract, err := bindArStore(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ArStoreTransactor{contract: contract}, nil
}

// NewArStoreFilterer creates a new log filterer instance of ArStore, bound to a specific deployed contract.
func NewArStoreFilterer(address common.Address, filterer bind.ContractFilterer) (*ArStoreFilterer, error) {
	contract, err := bindArStore(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ArStoreFilterer{contract: contract}, nil
}

// bindArStore binds a generic wrapper to an already deployed contract.
func bindArStore(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ArStoreABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ArStore *ArStoreRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ArStore.Contract.ArStoreCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ArStore *ArStoreRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArStore.Contract.ArStoreTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ArStore *ArStoreRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArStore.Contract.ArStoreTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ArStore *ArStoreCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ArStore.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ArStore *ArStoreTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ArStore.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ArStore *ArStoreTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ArStore.Contract.contract.Transact(opts, method, params...)
}

// CheckARId is a free data retrieval call binding the contract method 0x1b625eff.
//
// Solidity: function checkARId(arId string) constant returns(bool)
func (_ArStore *ArStoreCaller) CheckARId(opts *bind.CallOpts, arId string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ArStore.contract.Call(opts, out, "checkARId", arId)
	return *ret0, err
}

// CheckARId is a free data retrieval call binding the contract method 0x1b625eff.
//
// Solidity: function checkARId(arId string) constant returns(bool)
func (_ArStore *ArStoreSession) CheckARId(arId string) (bool, error) {
	return _ArStore.Contract.CheckARId(&_ArStore.CallOpts, arId)
}

// CheckARId is a free data retrieval call binding the contract method 0x1b625eff.
//
// Solidity: function checkARId(arId string) constant returns(bool)
func (_ArStore *ArStoreCallerSession) CheckARId(arId string) (bool, error) {
	return _ArStore.Contract.CheckARId(&_ArStore.CallOpts, arId)
}

// CheckCompanyId is a free data retrieval call binding the contract method 0xc73ac750.
//
// Solidity: function checkCompanyId(companyId string) constant returns(bool)
func (_ArStore *ArStoreCaller) CheckCompanyId(opts *bind.CallOpts, companyId string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ArStore.contract.Call(opts, out, "checkCompanyId", companyId)
	return *ret0, err
}

// CheckCompanyId is a free data retrieval call binding the contract method 0xc73ac750.
//
// Solidity: function checkCompanyId(companyId string) constant returns(bool)
func (_ArStore *ArStoreSession) CheckCompanyId(companyId string) (bool, error) {
	return _ArStore.Contract.CheckCompanyId(&_ArStore.CallOpts, companyId)
}

// CheckCompanyId is a free data retrieval call binding the contract method 0xc73ac750.
//
// Solidity: function checkCompanyId(companyId string) constant returns(bool)
func (_ArStore *ArStoreCallerSession) CheckCompanyId(companyId string) (bool, error) {
	return _ArStore.Contract.CheckCompanyId(&_ArStore.CallOpts, companyId)
}

// CheckContractNo is a free data retrieval call binding the contract method 0x556d3fc1.
//
// Solidity: function checkContractNo(contractNo string) constant returns(bool)
func (_ArStore *ArStoreCaller) CheckContractNo(opts *bind.CallOpts, contractNo string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ArStore.contract.Call(opts, out, "checkContractNo", contractNo)
	return *ret0, err
}

// CheckContractNo is a free data retrieval call binding the contract method 0x556d3fc1.
//
// Solidity: function checkContractNo(contractNo string) constant returns(bool)
func (_ArStore *ArStoreSession) CheckContractNo(contractNo string) (bool, error) {
	return _ArStore.Contract.CheckContractNo(&_ArStore.CallOpts, contractNo)
}

// CheckContractNo is a free data retrieval call binding the contract method 0x556d3fc1.
//
// Solidity: function checkContractNo(contractNo string) constant returns(bool)
func (_ArStore *ArStoreCallerSession) CheckContractNo(contractNo string) (bool, error) {
	return _ArStore.Contract.CheckContractNo(&_ArStore.CallOpts, contractNo)
}

// CheckDiscountId is a free data retrieval call binding the contract method 0xdc6e6ec6.
//
// Solidity: function checkDiscountId(discountId string) constant returns(bool)
func (_ArStore *ArStoreCaller) CheckDiscountId(opts *bind.CallOpts, discountId string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ArStore.contract.Call(opts, out, "checkDiscountId", discountId)
	return *ret0, err
}

// CheckDiscountId is a free data retrieval call binding the contract method 0xdc6e6ec6.
//
// Solidity: function checkDiscountId(discountId string) constant returns(bool)
func (_ArStore *ArStoreSession) CheckDiscountId(discountId string) (bool, error) {
	return _ArStore.Contract.CheckDiscountId(&_ArStore.CallOpts, discountId)
}

// CheckDiscountId is a free data retrieval call binding the contract method 0xdc6e6ec6.
//
// Solidity: function checkDiscountId(discountId string) constant returns(bool)
func (_ArStore *ArStoreCallerSession) CheckDiscountId(discountId string) (bool, error) {
	return _ArStore.Contract.CheckDiscountId(&_ArStore.CallOpts, discountId)
}

// CheckPayId is a free data retrieval call binding the contract method 0x5724a9ef.
//
// Solidity: function checkPayId(payId string) constant returns(bool)
func (_ArStore *ArStoreCaller) CheckPayId(opts *bind.CallOpts, payId string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ArStore.contract.Call(opts, out, "checkPayId", payId)
	return *ret0, err
}

// CheckPayId is a free data retrieval call binding the contract method 0x5724a9ef.
//
// Solidity: function checkPayId(payId string) constant returns(bool)
func (_ArStore *ArStoreSession) CheckPayId(payId string) (bool, error) {
	return _ArStore.Contract.CheckPayId(&_ArStore.CallOpts, payId)
}

// CheckPayId is a free data retrieval call binding the contract method 0x5724a9ef.
//
// Solidity: function checkPayId(payId string) constant returns(bool)
func (_ArStore *ArStoreCallerSession) CheckPayId(payId string) (bool, error) {
	return _ArStore.Contract.CheckPayId(&_ArStore.CallOpts, payId)
}

// CheckUserId is a free data retrieval call binding the contract method 0xe4f36ec8.
//
// Solidity: function checkUserId(userId uint256) constant returns(bool)
func (_ArStore *ArStoreCaller) CheckUserId(opts *bind.CallOpts, userId *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ArStore.contract.Call(opts, out, "checkUserId", userId)
	return *ret0, err
}

// CheckUserId is a free data retrieval call binding the contract method 0xe4f36ec8.
//
// Solidity: function checkUserId(userId uint256) constant returns(bool)
func (_ArStore *ArStoreSession) CheckUserId(userId *big.Int) (bool, error) {
	return _ArStore.Contract.CheckUserId(&_ArStore.CallOpts, userId)
}

// CheckUserId is a free data retrieval call binding the contract method 0xe4f36ec8.
//
// Solidity: function checkUserId(userId uint256) constant returns(bool)
func (_ArStore *ArStoreCallerSession) CheckUserId(userId *big.Int) (bool, error) {
	return _ArStore.Contract.CheckUserId(&_ArStore.CallOpts, userId)
}

// QueryArInfo is a free data retrieval call binding the contract method 0x735d40d4.
//
// Solidity: function queryArInfo(arId string) constant returns(string, string)
func (_ArStore *ArStoreCaller) QueryArInfo(opts *bind.CallOpts, arId string) (string, string, error) {
	var (
		ret0 = new(string)
		ret1 = new(string)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _ArStore.contract.Call(opts, out, "queryArInfo", arId)
	return *ret0, *ret1, err
}

// QueryArInfo is a free data retrieval call binding the contract method 0x735d40d4.
//
// Solidity: function queryArInfo(arId string) constant returns(string, string)
func (_ArStore *ArStoreSession) QueryArInfo(arId string) (string, string, error) {
	return _ArStore.Contract.QueryArInfo(&_ArStore.CallOpts, arId)
}

// QueryArInfo is a free data retrieval call binding the contract method 0x735d40d4.
//
// Solidity: function queryArInfo(arId string) constant returns(string, string)
func (_ArStore *ArStoreCallerSession) QueryArInfo(arId string) (string, string, error) {
	return _ArStore.Contract.QueryArInfo(&_ArStore.CallOpts, arId)
}

// QueryCompanyInfo is a free data retrieval call binding the contract method 0x3dc904a1.
//
// Solidity: function queryCompanyInfo(companyId string) constant returns(string, string)
func (_ArStore *ArStoreCaller) QueryCompanyInfo(opts *bind.CallOpts, companyId string) (string, string, error) {
	var (
		ret0 = new(string)
		ret1 = new(string)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _ArStore.contract.Call(opts, out, "queryCompanyInfo", companyId)
	return *ret0, *ret1, err
}

// QueryCompanyInfo is a free data retrieval call binding the contract method 0x3dc904a1.
//
// Solidity: function queryCompanyInfo(companyId string) constant returns(string, string)
func (_ArStore *ArStoreSession) QueryCompanyInfo(companyId string) (string, string, error) {
	return _ArStore.Contract.QueryCompanyInfo(&_ArStore.CallOpts, companyId)
}

// QueryCompanyInfo is a free data retrieval call binding the contract method 0x3dc904a1.
//
// Solidity: function queryCompanyInfo(companyId string) constant returns(string, string)
func (_ArStore *ArStoreCallerSession) QueryCompanyInfo(companyId string) (string, string, error) {
	return _ArStore.Contract.QueryCompanyInfo(&_ArStore.CallOpts, companyId)
}

// QueryContractInfo is a free data retrieval call binding the contract method 0xadbe6459.
//
// Solidity: function queryContractInfo(contractNo string) constant returns(string, string)
func (_ArStore *ArStoreCaller) QueryContractInfo(opts *bind.CallOpts, contractNo string) (string, string, error) {
	var (
		ret0 = new(string)
		ret1 = new(string)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _ArStore.contract.Call(opts, out, "queryContractInfo", contractNo)
	return *ret0, *ret1, err
}

// QueryContractInfo is a free data retrieval call binding the contract method 0xadbe6459.
//
// Solidity: function queryContractInfo(contractNo string) constant returns(string, string)
func (_ArStore *ArStoreSession) QueryContractInfo(contractNo string) (string, string, error) {
	return _ArStore.Contract.QueryContractInfo(&_ArStore.CallOpts, contractNo)
}

// QueryContractInfo is a free data retrieval call binding the contract method 0xadbe6459.
//
// Solidity: function queryContractInfo(contractNo string) constant returns(string, string)
func (_ArStore *ArStoreCallerSession) QueryContractInfo(contractNo string) (string, string, error) {
	return _ArStore.Contract.QueryContractInfo(&_ArStore.CallOpts, contractNo)
}

// QueryDiscountTx is a free data retrieval call binding the contract method 0xafac4086.
//
// Solidity: function queryDiscountTx(discountId string) constant returns(string, string)
func (_ArStore *ArStoreCaller) QueryDiscountTx(opts *bind.CallOpts, discountId string) (string, string, error) {
	var (
		ret0 = new(string)
		ret1 = new(string)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _ArStore.contract.Call(opts, out, "queryDiscountTx", discountId)
	return *ret0, *ret1, err
}

// QueryDiscountTx is a free data retrieval call binding the contract method 0xafac4086.
//
// Solidity: function queryDiscountTx(discountId string) constant returns(string, string)
func (_ArStore *ArStoreSession) QueryDiscountTx(discountId string) (string, string, error) {
	return _ArStore.Contract.QueryDiscountTx(&_ArStore.CallOpts, discountId)
}

// QueryDiscountTx is a free data retrieval call binding the contract method 0xafac4086.
//
// Solidity: function queryDiscountTx(discountId string) constant returns(string, string)
func (_ArStore *ArStoreCallerSession) QueryDiscountTx(discountId string) (string, string, error) {
	return _ArStore.Contract.QueryDiscountTx(&_ArStore.CallOpts, discountId)
}

// QueryPaymentTx is a free data retrieval call binding the contract method 0x74cd21c4.
//
// Solidity: function queryPaymentTx(payId string) constant returns(string, string)
func (_ArStore *ArStoreCaller) QueryPaymentTx(opts *bind.CallOpts, payId string) (string, string, error) {
	var (
		ret0 = new(string)
		ret1 = new(string)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _ArStore.contract.Call(opts, out, "queryPaymentTx", payId)
	return *ret0, *ret1, err
}

// QueryPaymentTx is a free data retrieval call binding the contract method 0x74cd21c4.
//
// Solidity: function queryPaymentTx(payId string) constant returns(string, string)
func (_ArStore *ArStoreSession) QueryPaymentTx(payId string) (string, string, error) {
	return _ArStore.Contract.QueryPaymentTx(&_ArStore.CallOpts, payId)
}

// QueryPaymentTx is a free data retrieval call binding the contract method 0x74cd21c4.
//
// Solidity: function queryPaymentTx(payId string) constant returns(string, string)
func (_ArStore *ArStoreCallerSession) QueryPaymentTx(payId string) (string, string, error) {
	return _ArStore.Contract.QueryPaymentTx(&_ArStore.CallOpts, payId)
}

// QueryValidAddress is a free data retrieval call binding the contract method 0x8aade303.
//
// Solidity: function queryValidAddress(inputAddress address) constant returns(bool)
func (_ArStore *ArStoreCaller) QueryValidAddress(opts *bind.CallOpts, inputAddress common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ArStore.contract.Call(opts, out, "queryValidAddress", inputAddress)
	return *ret0, err
}

// QueryValidAddress is a free data retrieval call binding the contract method 0x8aade303.
//
// Solidity: function queryValidAddress(inputAddress address) constant returns(bool)
func (_ArStore *ArStoreSession) QueryValidAddress(inputAddress common.Address) (bool, error) {
	return _ArStore.Contract.QueryValidAddress(&_ArStore.CallOpts, inputAddress)
}

// QueryValidAddress is a free data retrieval call binding the contract method 0x8aade303.
//
// Solidity: function queryValidAddress(inputAddress address) constant returns(bool)
func (_ArStore *ArStoreCallerSession) QueryValidAddress(inputAddress common.Address) (bool, error) {
	return _ArStore.Contract.QueryValidAddress(&_ArStore.CallOpts, inputAddress)
}

// AccountRegister is a paid mutator transaction binding the contract method 0xe493e207.
//
// Solidity: function accountRegister(userId uint256, bcAccount string, userInfo string) returns()
func (_ArStore *ArStoreTransactor) AccountRegister(opts *bind.TransactOpts, userId *big.Int, bcAccount string, userInfo string) (*types.Transaction, error) {
	return _ArStore.contract.Transact(opts, "accountRegister", userId, bcAccount, userInfo)
}

// AccountRegister is a paid mutator transaction binding the contract method 0xe493e207.
//
// Solidity: function accountRegister(userId uint256, bcAccount string, userInfo string) returns()
func (_ArStore *ArStoreSession) AccountRegister(userId *big.Int, bcAccount string, userInfo string) (*types.Transaction, error) {
	return _ArStore.Contract.AccountRegister(&_ArStore.TransactOpts, userId, bcAccount, userInfo)
}

// AccountRegister is a paid mutator transaction binding the contract method 0xe493e207.
//
// Solidity: function accountRegister(userId uint256, bcAccount string, userInfo string) returns()
func (_ArStore *ArStoreTransactorSession) AccountRegister(userId *big.Int, bcAccount string, userInfo string) (*types.Transaction, error) {
	return _ArStore.Contract.AccountRegister(&_ArStore.TransactOpts, userId, bcAccount, userInfo)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(inputAddress address) returns()
func (_ArStore *ArStoreTransactor) AddAdmin(opts *bind.TransactOpts, inputAddress common.Address) (*types.Transaction, error) {
	return _ArStore.contract.Transact(opts, "addAdmin", inputAddress)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(inputAddress address) returns()
func (_ArStore *ArStoreSession) AddAdmin(inputAddress common.Address) (*types.Transaction, error) {
	return _ArStore.Contract.AddAdmin(&_ArStore.TransactOpts, inputAddress)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(inputAddress address) returns()
func (_ArStore *ArStoreTransactorSession) AddAdmin(inputAddress common.Address) (*types.Transaction, error) {
	return _ArStore.Contract.AddAdmin(&_ArStore.TransactOpts, inputAddress)
}

// AddCompany is a paid mutator transaction binding the contract method 0x6559c310.
//
// Solidity: function addCompany(companyId string, otherCompanyInfo string) returns()
func (_ArStore *ArStoreTransactor) AddCompany(opts *bind.TransactOpts, companyId string, otherCompanyInfo string) (*types.Transaction, error) {
	return _ArStore.contract.Transact(opts, "addCompany", companyId, otherCompanyInfo)
}

// AddCompany is a paid mutator transaction binding the contract method 0x6559c310.
//
// Solidity: function addCompany(companyId string, otherCompanyInfo string) returns()
func (_ArStore *ArStoreSession) AddCompany(companyId string, otherCompanyInfo string) (*types.Transaction, error) {
	return _ArStore.Contract.AddCompany(&_ArStore.TransactOpts, companyId, otherCompanyInfo)
}

// AddCompany is a paid mutator transaction binding the contract method 0x6559c310.
//
// Solidity: function addCompany(companyId string, otherCompanyInfo string) returns()
func (_ArStore *ArStoreTransactorSession) AddCompany(companyId string, otherCompanyInfo string) (*types.Transaction, error) {
	return _ArStore.Contract.AddCompany(&_ArStore.TransactOpts, companyId, otherCompanyInfo)
}

// AddContract is a paid mutator transaction binding the contract method 0x49061757.
//
// Solidity: function addContract(contractNo string, otherContractInfo string) returns()
func (_ArStore *ArStoreTransactor) AddContract(opts *bind.TransactOpts, contractNo string, otherContractInfo string) (*types.Transaction, error) {
	return _ArStore.contract.Transact(opts, "addContract", contractNo, otherContractInfo)
}

// AddContract is a paid mutator transaction binding the contract method 0x49061757.
//
// Solidity: function addContract(contractNo string, otherContractInfo string) returns()
func (_ArStore *ArStoreSession) AddContract(contractNo string, otherContractInfo string) (*types.Transaction, error) {
	return _ArStore.Contract.AddContract(&_ArStore.TransactOpts, contractNo, otherContractInfo)
}

// AddContract is a paid mutator transaction binding the contract method 0x49061757.
//
// Solidity: function addContract(contractNo string, otherContractInfo string) returns()
func (_ArStore *ArStoreTransactorSession) AddContract(contractNo string, otherContractInfo string) (*types.Transaction, error) {
	return _ArStore.Contract.AddContract(&_ArStore.TransactOpts, contractNo, otherContractInfo)
}

// AddValidAddress is a paid mutator transaction binding the contract method 0x02bb62e3.
//
// Solidity: function addValidAddress(inputAddress address) returns()
func (_ArStore *ArStoreTransactor) AddValidAddress(opts *bind.TransactOpts, inputAddress common.Address) (*types.Transaction, error) {
	return _ArStore.contract.Transact(opts, "addValidAddress", inputAddress)
}

// AddValidAddress is a paid mutator transaction binding the contract method 0x02bb62e3.
//
// Solidity: function addValidAddress(inputAddress address) returns()
func (_ArStore *ArStoreSession) AddValidAddress(inputAddress common.Address) (*types.Transaction, error) {
	return _ArStore.Contract.AddValidAddress(&_ArStore.TransactOpts, inputAddress)
}

// AddValidAddress is a paid mutator transaction binding the contract method 0x02bb62e3.
//
// Solidity: function addValidAddress(inputAddress address) returns()
func (_ArStore *ArStoreTransactorSession) AddValidAddress(inputAddress common.Address) (*types.Transaction, error) {
	return _ArStore.Contract.AddValidAddress(&_ArStore.TransactOpts, inputAddress)
}

// CreateAR is a paid mutator transaction binding the contract method 0xd627325e.
//
// Solidity: function createAR(arId string, otherARInfo string) returns()
func (_ArStore *ArStoreTransactor) CreateAR(opts *bind.TransactOpts, arId string, otherARInfo string) (*types.Transaction, error) {
	return _ArStore.contract.Transact(opts, "createAR", arId, otherARInfo)
}

// CreateAR is a paid mutator transaction binding the contract method 0xd627325e.
//
// Solidity: function createAR(arId string, otherARInfo string) returns()
func (_ArStore *ArStoreSession) CreateAR(arId string, otherARInfo string) (*types.Transaction, error) {
	return _ArStore.Contract.CreateAR(&_ArStore.TransactOpts, arId, otherARInfo)
}

// CreateAR is a paid mutator transaction binding the contract method 0xd627325e.
//
// Solidity: function createAR(arId string, otherARInfo string) returns()
func (_ArStore *ArStoreTransactorSession) CreateAR(arId string, otherARInfo string) (*types.Transaction, error) {
	return _ArStore.Contract.CreateAR(&_ArStore.TransactOpts, arId, otherARInfo)
}

// DeleteValidAddress is a paid mutator transaction binding the contract method 0xaab0205d.
//
// Solidity: function deleteValidAddress(inputAddress address) returns()
func (_ArStore *ArStoreTransactor) DeleteValidAddress(opts *bind.TransactOpts, inputAddress common.Address) (*types.Transaction, error) {
	return _ArStore.contract.Transact(opts, "deleteValidAddress", inputAddress)
}

// DeleteValidAddress is a paid mutator transaction binding the contract method 0xaab0205d.
//
// Solidity: function deleteValidAddress(inputAddress address) returns()
func (_ArStore *ArStoreSession) DeleteValidAddress(inputAddress common.Address) (*types.Transaction, error) {
	return _ArStore.Contract.DeleteValidAddress(&_ArStore.TransactOpts, inputAddress)
}

// DeleteValidAddress is a paid mutator transaction binding the contract method 0xaab0205d.
//
// Solidity: function deleteValidAddress(inputAddress address) returns()
func (_ArStore *ArStoreTransactorSession) DeleteValidAddress(inputAddress common.Address) (*types.Transaction, error) {
	return _ArStore.Contract.DeleteValidAddress(&_ArStore.TransactOpts, inputAddress)
}

// DiscountByAR is a paid mutator transaction binding the contract method 0x86672ae0.
//
// Solidity: function discountByAR(discountId string, otherDiscountInfo string) returns()
func (_ArStore *ArStoreTransactor) DiscountByAR(opts *bind.TransactOpts, discountId string, otherDiscountInfo string) (*types.Transaction, error) {
	return _ArStore.contract.Transact(opts, "discountByAR", discountId, otherDiscountInfo)
}

// DiscountByAR is a paid mutator transaction binding the contract method 0x86672ae0.
//
// Solidity: function discountByAR(discountId string, otherDiscountInfo string) returns()
func (_ArStore *ArStoreSession) DiscountByAR(discountId string, otherDiscountInfo string) (*types.Transaction, error) {
	return _ArStore.Contract.DiscountByAR(&_ArStore.TransactOpts, discountId, otherDiscountInfo)
}

// DiscountByAR is a paid mutator transaction binding the contract method 0x86672ae0.
//
// Solidity: function discountByAR(discountId string, otherDiscountInfo string) returns()
func (_ArStore *ArStoreTransactorSession) DiscountByAR(discountId string, otherDiscountInfo string) (*types.Transaction, error) {
	return _ArStore.Contract.DiscountByAR(&_ArStore.TransactOpts, discountId, otherDiscountInfo)
}

// PayByAR is a paid mutator transaction binding the contract method 0x849a84de.
//
// Solidity: function payByAR(payId string, otherARPayInfo string) returns()
func (_ArStore *ArStoreTransactor) PayByAR(opts *bind.TransactOpts, payId string, otherARPayInfo string) (*types.Transaction, error) {
	return _ArStore.contract.Transact(opts, "payByAR", payId, otherARPayInfo)
}

// PayByAR is a paid mutator transaction binding the contract method 0x849a84de.
//
// Solidity: function payByAR(payId string, otherARPayInfo string) returns()
func (_ArStore *ArStoreSession) PayByAR(payId string, otherARPayInfo string) (*types.Transaction, error) {
	return _ArStore.Contract.PayByAR(&_ArStore.TransactOpts, payId, otherARPayInfo)
}

// PayByAR is a paid mutator transaction binding the contract method 0x849a84de.
//
// Solidity: function payByAR(payId string, otherARPayInfo string) returns()
func (_ArStore *ArStoreTransactorSession) PayByAR(payId string, otherARPayInfo string) (*types.Transaction, error) {
	return _ArStore.Contract.PayByAR(&_ArStore.TransactOpts, payId, otherARPayInfo)
}

// UpdateARInfo is a paid mutator transaction binding the contract method 0xdc527b1a.
//
// Solidity: function updateARInfo(arId string, otherARInfo string) returns()
func (_ArStore *ArStoreTransactor) UpdateARInfo(opts *bind.TransactOpts, arId string, otherARInfo string) (*types.Transaction, error) {
	return _ArStore.contract.Transact(opts, "updateARInfo", arId, otherARInfo)
}

// UpdateARInfo is a paid mutator transaction binding the contract method 0xdc527b1a.
//
// Solidity: function updateARInfo(arId string, otherARInfo string) returns()
func (_ArStore *ArStoreSession) UpdateARInfo(arId string, otherARInfo string) (*types.Transaction, error) {
	return _ArStore.Contract.UpdateARInfo(&_ArStore.TransactOpts, arId, otherARInfo)
}

// UpdateARInfo is a paid mutator transaction binding the contract method 0xdc527b1a.
//
// Solidity: function updateARInfo(arId string, otherARInfo string) returns()
func (_ArStore *ArStoreTransactorSession) UpdateARInfo(arId string, otherARInfo string) (*types.Transaction, error) {
	return _ArStore.Contract.UpdateARInfo(&_ArStore.TransactOpts, arId, otherARInfo)
}

// UpdateCompanyInfo is a paid mutator transaction binding the contract method 0x1a0a6c68.
//
// Solidity: function updateCompanyInfo(companyId string, otherCompanyInfo string) returns()
func (_ArStore *ArStoreTransactor) UpdateCompanyInfo(opts *bind.TransactOpts, companyId string, otherCompanyInfo string) (*types.Transaction, error) {
	return _ArStore.contract.Transact(opts, "updateCompanyInfo", companyId, otherCompanyInfo)
}

// UpdateCompanyInfo is a paid mutator transaction binding the contract method 0x1a0a6c68.
//
// Solidity: function updateCompanyInfo(companyId string, otherCompanyInfo string) returns()
func (_ArStore *ArStoreSession) UpdateCompanyInfo(companyId string, otherCompanyInfo string) (*types.Transaction, error) {
	return _ArStore.Contract.UpdateCompanyInfo(&_ArStore.TransactOpts, companyId, otherCompanyInfo)
}

// UpdateCompanyInfo is a paid mutator transaction binding the contract method 0x1a0a6c68.
//
// Solidity: function updateCompanyInfo(companyId string, otherCompanyInfo string) returns()
func (_ArStore *ArStoreTransactorSession) UpdateCompanyInfo(companyId string, otherCompanyInfo string) (*types.Transaction, error) {
	return _ArStore.Contract.UpdateCompanyInfo(&_ArStore.TransactOpts, companyId, otherCompanyInfo)
}

// UpdateContractInfo is a paid mutator transaction binding the contract method 0xfe5d552d.
//
// Solidity: function updateContractInfo(contractNo string, otherContractInfo string) returns()
func (_ArStore *ArStoreTransactor) UpdateContractInfo(opts *bind.TransactOpts, contractNo string, otherContractInfo string) (*types.Transaction, error) {
	return _ArStore.contract.Transact(opts, "updateContractInfo", contractNo, otherContractInfo)
}

// UpdateContractInfo is a paid mutator transaction binding the contract method 0xfe5d552d.
//
// Solidity: function updateContractInfo(contractNo string, otherContractInfo string) returns()
func (_ArStore *ArStoreSession) UpdateContractInfo(contractNo string, otherContractInfo string) (*types.Transaction, error) {
	return _ArStore.Contract.UpdateContractInfo(&_ArStore.TransactOpts, contractNo, otherContractInfo)
}

// UpdateContractInfo is a paid mutator transaction binding the contract method 0xfe5d552d.
//
// Solidity: function updateContractInfo(contractNo string, otherContractInfo string) returns()
func (_ArStore *ArStoreTransactorSession) UpdateContractInfo(contractNo string, otherContractInfo string) (*types.Transaction, error) {
	return _ArStore.Contract.UpdateContractInfo(&_ArStore.TransactOpts, contractNo, otherContractInfo)
}

// UpdateDiscountInfoOfAR is a paid mutator transaction binding the contract method 0xa090a0a8.
//
// Solidity: function updateDiscountInfoOfAR(discountId string, otherDiscountInfo string) returns()
func (_ArStore *ArStoreTransactor) UpdateDiscountInfoOfAR(opts *bind.TransactOpts, discountId string, otherDiscountInfo string) (*types.Transaction, error) {
	return _ArStore.contract.Transact(opts, "updateDiscountInfoOfAR", discountId, otherDiscountInfo)
}

// UpdateDiscountInfoOfAR is a paid mutator transaction binding the contract method 0xa090a0a8.
//
// Solidity: function updateDiscountInfoOfAR(discountId string, otherDiscountInfo string) returns()
func (_ArStore *ArStoreSession) UpdateDiscountInfoOfAR(discountId string, otherDiscountInfo string) (*types.Transaction, error) {
	return _ArStore.Contract.UpdateDiscountInfoOfAR(&_ArStore.TransactOpts, discountId, otherDiscountInfo)
}

// UpdateDiscountInfoOfAR is a paid mutator transaction binding the contract method 0xa090a0a8.
//
// Solidity: function updateDiscountInfoOfAR(discountId string, otherDiscountInfo string) returns()
func (_ArStore *ArStoreTransactorSession) UpdateDiscountInfoOfAR(discountId string, otherDiscountInfo string) (*types.Transaction, error) {
	return _ArStore.Contract.UpdateDiscountInfoOfAR(&_ArStore.TransactOpts, discountId, otherDiscountInfo)
}

// UpdatePaymentInfoOfAR is a paid mutator transaction binding the contract method 0xaa86c09e.
//
// Solidity: function updatePaymentInfoOfAR(payId string, otherARPayInfo string) returns()
func (_ArStore *ArStoreTransactor) UpdatePaymentInfoOfAR(opts *bind.TransactOpts, payId string, otherARPayInfo string) (*types.Transaction, error) {
	return _ArStore.contract.Transact(opts, "updatePaymentInfoOfAR", payId, otherARPayInfo)
}

// UpdatePaymentInfoOfAR is a paid mutator transaction binding the contract method 0xaa86c09e.
//
// Solidity: function updatePaymentInfoOfAR(payId string, otherARPayInfo string) returns()
func (_ArStore *ArStoreSession) UpdatePaymentInfoOfAR(payId string, otherARPayInfo string) (*types.Transaction, error) {
	return _ArStore.Contract.UpdatePaymentInfoOfAR(&_ArStore.TransactOpts, payId, otherARPayInfo)
}

// UpdatePaymentInfoOfAR is a paid mutator transaction binding the contract method 0xaa86c09e.
//
// Solidity: function updatePaymentInfoOfAR(payId string, otherARPayInfo string) returns()
func (_ArStore *ArStoreTransactorSession) UpdatePaymentInfoOfAR(payId string, otherARPayInfo string) (*types.Transaction, error) {
	return _ArStore.Contract.UpdatePaymentInfoOfAR(&_ArStore.TransactOpts, payId, otherARPayInfo)
}

// ArStoreARDiscountIterator is returned from FilterARDiscount and is used to iterate over the raw logs and unpacked data for ARDiscount events raised by the ArStore contract.
type ArStoreARDiscountIterator struct {
	Event *ArStoreARDiscount // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ArStoreARDiscountIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArStoreARDiscount)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ArStoreARDiscount)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ArStoreARDiscountIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ArStoreARDiscountIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ArStoreARDiscount represents a ARDiscount event raised by the ArStore contract.
type ArStoreARDiscount struct {
	DiscountId        string
	OtherDiscountInfo string
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterARDiscount is a free log retrieval operation binding the contract event 0xee6188daa001b6adba3924f5aef1e43bbb3894d70c7e26c5376d54a9cdd6329f.
//
// Solidity: event ARDiscount(discountId string, otherDiscountInfo string)
func (_ArStore *ArStoreFilterer) FilterARDiscount(opts *bind.FilterOpts) (*ArStoreARDiscountIterator, error) {

	logs, sub, err := _ArStore.contract.FilterLogs(opts, "ARDiscount")
	if err != nil {
		return nil, err
	}
	return &ArStoreARDiscountIterator{contract: _ArStore.contract, event: "ARDiscount", logs: logs, sub: sub}, nil
}

// WatchARDiscount is a free log subscription operation binding the contract event 0xee6188daa001b6adba3924f5aef1e43bbb3894d70c7e26c5376d54a9cdd6329f.
//
// Solidity: event ARDiscount(discountId string, otherDiscountInfo string)
func (_ArStore *ArStoreFilterer) WatchARDiscount(opts *bind.WatchOpts, sink chan<- *ArStoreARDiscount) (event.Subscription, error) {

	logs, sub, err := _ArStore.contract.WatchLogs(opts, "ARDiscount")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ArStoreARDiscount)
				if err := _ArStore.contract.UnpackLog(event, "ARDiscount", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ArStoreARDiscountTxUpdateIterator is returned from FilterARDiscountTxUpdate and is used to iterate over the raw logs and unpacked data for ARDiscountTxUpdate events raised by the ArStore contract.
type ArStoreARDiscountTxUpdateIterator struct {
	Event *ArStoreARDiscountTxUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ArStoreARDiscountTxUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArStoreARDiscountTxUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ArStoreARDiscountTxUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ArStoreARDiscountTxUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ArStoreARDiscountTxUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ArStoreARDiscountTxUpdate represents a ARDiscountTxUpdate event raised by the ArStore contract.
type ArStoreARDiscountTxUpdate struct {
	DiscountId        string
	OtherDiscountInfo string
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterARDiscountTxUpdate is a free log retrieval operation binding the contract event 0xa63efca52b1b290c061dbda267833fd5f7ab0e823c41b484dde98b5fafd15c88.
//
// Solidity: event ARDiscountTxUpdate(discountId string, otherDiscountInfo string)
func (_ArStore *ArStoreFilterer) FilterARDiscountTxUpdate(opts *bind.FilterOpts) (*ArStoreARDiscountTxUpdateIterator, error) {

	logs, sub, err := _ArStore.contract.FilterLogs(opts, "ARDiscountTxUpdate")
	if err != nil {
		return nil, err
	}
	return &ArStoreARDiscountTxUpdateIterator{contract: _ArStore.contract, event: "ARDiscountTxUpdate", logs: logs, sub: sub}, nil
}

// WatchARDiscountTxUpdate is a free log subscription operation binding the contract event 0xa63efca52b1b290c061dbda267833fd5f7ab0e823c41b484dde98b5fafd15c88.
//
// Solidity: event ARDiscountTxUpdate(discountId string, otherDiscountInfo string)
func (_ArStore *ArStoreFilterer) WatchARDiscountTxUpdate(opts *bind.WatchOpts, sink chan<- *ArStoreARDiscountTxUpdate) (event.Subscription, error) {

	logs, sub, err := _ArStore.contract.WatchLogs(opts, "ARDiscountTxUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ArStoreARDiscountTxUpdate)
				if err := _ArStore.contract.UnpackLog(event, "ARDiscountTxUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ArStoreARInfoUpdateIterator is returned from FilterARInfoUpdate and is used to iterate over the raw logs and unpacked data for ARInfoUpdate events raised by the ArStore contract.
type ArStoreARInfoUpdateIterator struct {
	Event *ArStoreARInfoUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ArStoreARInfoUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArStoreARInfoUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ArStoreARInfoUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ArStoreARInfoUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ArStoreARInfoUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ArStoreARInfoUpdate represents a ARInfoUpdate event raised by the ArStore contract.
type ArStoreARInfoUpdate struct {
	ArId        string
	OtherARInfo string
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterARInfoUpdate is a free log retrieval operation binding the contract event 0x5825912fe71c9873e5908194054f98265d4c946e7b6486e4b2789010dff86540.
//
// Solidity: event ARInfoUpdate(arId string, otherARInfo string)
func (_ArStore *ArStoreFilterer) FilterARInfoUpdate(opts *bind.FilterOpts) (*ArStoreARInfoUpdateIterator, error) {

	logs, sub, err := _ArStore.contract.FilterLogs(opts, "ARInfoUpdate")
	if err != nil {
		return nil, err
	}
	return &ArStoreARInfoUpdateIterator{contract: _ArStore.contract, event: "ARInfoUpdate", logs: logs, sub: sub}, nil
}

// WatchARInfoUpdate is a free log subscription operation binding the contract event 0x5825912fe71c9873e5908194054f98265d4c946e7b6486e4b2789010dff86540.
//
// Solidity: event ARInfoUpdate(arId string, otherARInfo string)
func (_ArStore *ArStoreFilterer) WatchARInfoUpdate(opts *bind.WatchOpts, sink chan<- *ArStoreARInfoUpdate) (event.Subscription, error) {

	logs, sub, err := _ArStore.contract.WatchLogs(opts, "ARInfoUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ArStoreARInfoUpdate)
				if err := _ArStore.contract.UnpackLog(event, "ARInfoUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ArStoreARPayIterator is returned from FilterARPay and is used to iterate over the raw logs and unpacked data for ARPay events raised by the ArStore contract.
type ArStoreARPayIterator struct {
	Event *ArStoreARPay // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ArStoreARPayIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArStoreARPay)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ArStoreARPay)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ArStoreARPayIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ArStoreARPayIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ArStoreARPay represents a ARPay event raised by the ArStore contract.
type ArStoreARPay struct {
	PayId          string
	OtherARPayInfo string
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterARPay is a free log retrieval operation binding the contract event 0xde6e0d80d761e7ca1ca83e4e4d8c7e2f4aa2318bf51dfbfe95d36b9aa2808c46.
//
// Solidity: event ARPay(payId string, otherARPayInfo string)
func (_ArStore *ArStoreFilterer) FilterARPay(opts *bind.FilterOpts) (*ArStoreARPayIterator, error) {

	logs, sub, err := _ArStore.contract.FilterLogs(opts, "ARPay")
	if err != nil {
		return nil, err
	}
	return &ArStoreARPayIterator{contract: _ArStore.contract, event: "ARPay", logs: logs, sub: sub}, nil
}

// WatchARPay is a free log subscription operation binding the contract event 0xde6e0d80d761e7ca1ca83e4e4d8c7e2f4aa2318bf51dfbfe95d36b9aa2808c46.
//
// Solidity: event ARPay(payId string, otherARPayInfo string)
func (_ArStore *ArStoreFilterer) WatchARPay(opts *bind.WatchOpts, sink chan<- *ArStoreARPay) (event.Subscription, error) {

	logs, sub, err := _ArStore.contract.WatchLogs(opts, "ARPay")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ArStoreARPay)
				if err := _ArStore.contract.UnpackLog(event, "ARPay", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ArStoreARPaymentTxUpdateIterator is returned from FilterARPaymentTxUpdate and is used to iterate over the raw logs and unpacked data for ARPaymentTxUpdate events raised by the ArStore contract.
type ArStoreARPaymentTxUpdateIterator struct {
	Event *ArStoreARPaymentTxUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ArStoreARPaymentTxUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArStoreARPaymentTxUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ArStoreARPaymentTxUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ArStoreARPaymentTxUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ArStoreARPaymentTxUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ArStoreARPaymentTxUpdate represents a ARPaymentTxUpdate event raised by the ArStore contract.
type ArStoreARPaymentTxUpdate struct {
	PayId          string
	OtherARPayInfo string
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterARPaymentTxUpdate is a free log retrieval operation binding the contract event 0xd3be6a47b550b0ca84c64b6de4a62e30572a14922fce33b89da9e777923e89d3.
//
// Solidity: event ARPaymentTxUpdate(payId string, otherARPayInfo string)
func (_ArStore *ArStoreFilterer) FilterARPaymentTxUpdate(opts *bind.FilterOpts) (*ArStoreARPaymentTxUpdateIterator, error) {

	logs, sub, err := _ArStore.contract.FilterLogs(opts, "ARPaymentTxUpdate")
	if err != nil {
		return nil, err
	}
	return &ArStoreARPaymentTxUpdateIterator{contract: _ArStore.contract, event: "ARPaymentTxUpdate", logs: logs, sub: sub}, nil
}

// WatchARPaymentTxUpdate is a free log subscription operation binding the contract event 0xd3be6a47b550b0ca84c64b6de4a62e30572a14922fce33b89da9e777923e89d3.
//
// Solidity: event ARPaymentTxUpdate(payId string, otherARPayInfo string)
func (_ArStore *ArStoreFilterer) WatchARPaymentTxUpdate(opts *bind.WatchOpts, sink chan<- *ArStoreARPaymentTxUpdate) (event.Subscription, error) {

	logs, sub, err := _ArStore.contract.WatchLogs(opts, "ARPaymentTxUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ArStoreARPaymentTxUpdate)
				if err := _ArStore.contract.UnpackLog(event, "ARPaymentTxUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ArStoreAddAdminIterator is returned from FilterAddAdmin and is used to iterate over the raw logs and unpacked data for AddAdmin events raised by the ArStore contract.
type ArStoreAddAdminIterator struct {
	Event *ArStoreAddAdmin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ArStoreAddAdminIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArStoreAddAdmin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ArStoreAddAdmin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ArStoreAddAdminIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ArStoreAddAdminIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ArStoreAddAdmin represents a AddAdmin event raised by the ArStore contract.
type ArStoreAddAdmin struct {
	InputAddress common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterAddAdmin is a free log retrieval operation binding the contract event 0xad6de4452a631e641cb59902236607946ce9272b9b981f2f80e8d129cb9084ba.
//
// Solidity: event AddAdmin(inputAddress address)
func (_ArStore *ArStoreFilterer) FilterAddAdmin(opts *bind.FilterOpts) (*ArStoreAddAdminIterator, error) {

	logs, sub, err := _ArStore.contract.FilterLogs(opts, "AddAdmin")
	if err != nil {
		return nil, err
	}
	return &ArStoreAddAdminIterator{contract: _ArStore.contract, event: "AddAdmin", logs: logs, sub: sub}, nil
}

// WatchAddAdmin is a free log subscription operation binding the contract event 0xad6de4452a631e641cb59902236607946ce9272b9b981f2f80e8d129cb9084ba.
//
// Solidity: event AddAdmin(inputAddress address)
func (_ArStore *ArStoreFilterer) WatchAddAdmin(opts *bind.WatchOpts, sink chan<- *ArStoreAddAdmin) (event.Subscription, error) {

	logs, sub, err := _ArStore.contract.WatchLogs(opts, "AddAdmin")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ArStoreAddAdmin)
				if err := _ArStore.contract.UnpackLog(event, "AddAdmin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ArStoreAddCompanyIterator is returned from FilterAddCompany and is used to iterate over the raw logs and unpacked data for AddCompany events raised by the ArStore contract.
type ArStoreAddCompanyIterator struct {
	Event *ArStoreAddCompany // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ArStoreAddCompanyIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArStoreAddCompany)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ArStoreAddCompany)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ArStoreAddCompanyIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ArStoreAddCompanyIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ArStoreAddCompany represents a AddCompany event raised by the ArStore contract.
type ArStoreAddCompany struct {
	CompanyId        string
	OtherCompanyInfo string
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterAddCompany is a free log retrieval operation binding the contract event 0x4da365beff783759f53b7fb0227cf09776d94a116be497d8c967223d38740c73.
//
// Solidity: event AddCompany(companyId string, otherCompanyInfo string)
func (_ArStore *ArStoreFilterer) FilterAddCompany(opts *bind.FilterOpts) (*ArStoreAddCompanyIterator, error) {

	logs, sub, err := _ArStore.contract.FilterLogs(opts, "AddCompany")
	if err != nil {
		return nil, err
	}
	return &ArStoreAddCompanyIterator{contract: _ArStore.contract, event: "AddCompany", logs: logs, sub: sub}, nil
}

// WatchAddCompany is a free log subscription operation binding the contract event 0x4da365beff783759f53b7fb0227cf09776d94a116be497d8c967223d38740c73.
//
// Solidity: event AddCompany(companyId string, otherCompanyInfo string)
func (_ArStore *ArStoreFilterer) WatchAddCompany(opts *bind.WatchOpts, sink chan<- *ArStoreAddCompany) (event.Subscription, error) {

	logs, sub, err := _ArStore.contract.WatchLogs(opts, "AddCompany")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ArStoreAddCompany)
				if err := _ArStore.contract.UnpackLog(event, "AddCompany", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ArStoreAddContractIterator is returned from FilterAddContract and is used to iterate over the raw logs and unpacked data for AddContract events raised by the ArStore contract.
type ArStoreAddContractIterator struct {
	Event *ArStoreAddContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ArStoreAddContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArStoreAddContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ArStoreAddContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ArStoreAddContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ArStoreAddContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ArStoreAddContract represents a AddContract event raised by the ArStore contract.
type ArStoreAddContract struct {
	ContractNo        string
	OtherContractInfo string
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterAddContract is a free log retrieval operation binding the contract event 0x516729973459e4298de976b6e109f87200dce20f85caa6cadb58afd5aca2a415.
//
// Solidity: event AddContract(contractNo string, otherContractInfo string)
func (_ArStore *ArStoreFilterer) FilterAddContract(opts *bind.FilterOpts) (*ArStoreAddContractIterator, error) {

	logs, sub, err := _ArStore.contract.FilterLogs(opts, "AddContract")
	if err != nil {
		return nil, err
	}
	return &ArStoreAddContractIterator{contract: _ArStore.contract, event: "AddContract", logs: logs, sub: sub}, nil
}

// WatchAddContract is a free log subscription operation binding the contract event 0x516729973459e4298de976b6e109f87200dce20f85caa6cadb58afd5aca2a415.
//
// Solidity: event AddContract(contractNo string, otherContractInfo string)
func (_ArStore *ArStoreFilterer) WatchAddContract(opts *bind.WatchOpts, sink chan<- *ArStoreAddContract) (event.Subscription, error) {

	logs, sub, err := _ArStore.contract.WatchLogs(opts, "AddContract")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ArStoreAddContract)
				if err := _ArStore.contract.UnpackLog(event, "AddContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ArStoreAddValidAddressIterator is returned from FilterAddValidAddress and is used to iterate over the raw logs and unpacked data for AddValidAddress events raised by the ArStore contract.
type ArStoreAddValidAddressIterator struct {
	Event *ArStoreAddValidAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ArStoreAddValidAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArStoreAddValidAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ArStoreAddValidAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ArStoreAddValidAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ArStoreAddValidAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ArStoreAddValidAddress represents a AddValidAddress event raised by the ArStore contract.
type ArStoreAddValidAddress struct {
	InputAddress common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterAddValidAddress is a free log retrieval operation binding the contract event 0xfd99d369d59043ec7e7e684eb3b64fb389349bb7f358b45d2488486186096c88.
//
// Solidity: event AddValidAddress(inputAddress address)
func (_ArStore *ArStoreFilterer) FilterAddValidAddress(opts *bind.FilterOpts) (*ArStoreAddValidAddressIterator, error) {

	logs, sub, err := _ArStore.contract.FilterLogs(opts, "AddValidAddress")
	if err != nil {
		return nil, err
	}
	return &ArStoreAddValidAddressIterator{contract: _ArStore.contract, event: "AddValidAddress", logs: logs, sub: sub}, nil
}

// WatchAddValidAddress is a free log subscription operation binding the contract event 0xfd99d369d59043ec7e7e684eb3b64fb389349bb7f358b45d2488486186096c88.
//
// Solidity: event AddValidAddress(inputAddress address)
func (_ArStore *ArStoreFilterer) WatchAddValidAddress(opts *bind.WatchOpts, sink chan<- *ArStoreAddValidAddress) (event.Subscription, error) {

	logs, sub, err := _ArStore.contract.WatchLogs(opts, "AddValidAddress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ArStoreAddValidAddress)
				if err := _ArStore.contract.UnpackLog(event, "AddValidAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ArStoreCompanyInfoUpdateIterator is returned from FilterCompanyInfoUpdate and is used to iterate over the raw logs and unpacked data for CompanyInfoUpdate events raised by the ArStore contract.
type ArStoreCompanyInfoUpdateIterator struct {
	Event *ArStoreCompanyInfoUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ArStoreCompanyInfoUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArStoreCompanyInfoUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ArStoreCompanyInfoUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ArStoreCompanyInfoUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ArStoreCompanyInfoUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ArStoreCompanyInfoUpdate represents a CompanyInfoUpdate event raised by the ArStore contract.
type ArStoreCompanyInfoUpdate struct {
	CompanyId        string
	OtherCompanyInfo string
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterCompanyInfoUpdate is a free log retrieval operation binding the contract event 0xc5d4c08e7ddc547a2cc0c88249f55ca6f79db43f6b05cb9a9b426bea829384e6.
//
// Solidity: event CompanyInfoUpdate(companyId string, otherCompanyInfo string)
func (_ArStore *ArStoreFilterer) FilterCompanyInfoUpdate(opts *bind.FilterOpts) (*ArStoreCompanyInfoUpdateIterator, error) {

	logs, sub, err := _ArStore.contract.FilterLogs(opts, "CompanyInfoUpdate")
	if err != nil {
		return nil, err
	}
	return &ArStoreCompanyInfoUpdateIterator{contract: _ArStore.contract, event: "CompanyInfoUpdate", logs: logs, sub: sub}, nil
}

// WatchCompanyInfoUpdate is a free log subscription operation binding the contract event 0xc5d4c08e7ddc547a2cc0c88249f55ca6f79db43f6b05cb9a9b426bea829384e6.
//
// Solidity: event CompanyInfoUpdate(companyId string, otherCompanyInfo string)
func (_ArStore *ArStoreFilterer) WatchCompanyInfoUpdate(opts *bind.WatchOpts, sink chan<- *ArStoreCompanyInfoUpdate) (event.Subscription, error) {

	logs, sub, err := _ArStore.contract.WatchLogs(opts, "CompanyInfoUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ArStoreCompanyInfoUpdate)
				if err := _ArStore.contract.UnpackLog(event, "CompanyInfoUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ArStoreContractInfoUpdateIterator is returned from FilterContractInfoUpdate and is used to iterate over the raw logs and unpacked data for ContractInfoUpdate events raised by the ArStore contract.
type ArStoreContractInfoUpdateIterator struct {
	Event *ArStoreContractInfoUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ArStoreContractInfoUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArStoreContractInfoUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ArStoreContractInfoUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ArStoreContractInfoUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ArStoreContractInfoUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ArStoreContractInfoUpdate represents a ContractInfoUpdate event raised by the ArStore contract.
type ArStoreContractInfoUpdate struct {
	ContractNo        string
	OtherContractInfo string
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterContractInfoUpdate is a free log retrieval operation binding the contract event 0xf9d4226c2fb9d76fcdb373d47ab8e58acbd70b9c4c1f94792cad9d6de3fc612e.
//
// Solidity: event ContractInfoUpdate(contractNo string, otherContractInfo string)
func (_ArStore *ArStoreFilterer) FilterContractInfoUpdate(opts *bind.FilterOpts) (*ArStoreContractInfoUpdateIterator, error) {

	logs, sub, err := _ArStore.contract.FilterLogs(opts, "ContractInfoUpdate")
	if err != nil {
		return nil, err
	}
	return &ArStoreContractInfoUpdateIterator{contract: _ArStore.contract, event: "ContractInfoUpdate", logs: logs, sub: sub}, nil
}

// WatchContractInfoUpdate is a free log subscription operation binding the contract event 0xf9d4226c2fb9d76fcdb373d47ab8e58acbd70b9c4c1f94792cad9d6de3fc612e.
//
// Solidity: event ContractInfoUpdate(contractNo string, otherContractInfo string)
func (_ArStore *ArStoreFilterer) WatchContractInfoUpdate(opts *bind.WatchOpts, sink chan<- *ArStoreContractInfoUpdate) (event.Subscription, error) {

	logs, sub, err := _ArStore.contract.WatchLogs(opts, "ContractInfoUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ArStoreContractInfoUpdate)
				if err := _ArStore.contract.UnpackLog(event, "ContractInfoUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ArStoreCreateARIterator is returned from FilterCreateAR and is used to iterate over the raw logs and unpacked data for CreateAR events raised by the ArStore contract.
type ArStoreCreateARIterator struct {
	Event *ArStoreCreateAR // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ArStoreCreateARIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArStoreCreateAR)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ArStoreCreateAR)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ArStoreCreateARIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ArStoreCreateARIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ArStoreCreateAR represents a CreateAR event raised by the ArStore contract.
type ArStoreCreateAR struct {
	ArId        string
	OtherARInfo string
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterCreateAR is a free log retrieval operation binding the contract event 0x05d2736ab72b013950666611bf9f68c9f4736b6033f081a04c2f9ac7cb8d52b6.
//
// Solidity: event CreateAR(arId string, otherARInfo string)
func (_ArStore *ArStoreFilterer) FilterCreateAR(opts *bind.FilterOpts) (*ArStoreCreateARIterator, error) {

	logs, sub, err := _ArStore.contract.FilterLogs(opts, "CreateAR")
	if err != nil {
		return nil, err
	}
	return &ArStoreCreateARIterator{contract: _ArStore.contract, event: "CreateAR", logs: logs, sub: sub}, nil
}

// WatchCreateAR is a free log subscription operation binding the contract event 0x05d2736ab72b013950666611bf9f68c9f4736b6033f081a04c2f9ac7cb8d52b6.
//
// Solidity: event CreateAR(arId string, otherARInfo string)
func (_ArStore *ArStoreFilterer) WatchCreateAR(opts *bind.WatchOpts, sink chan<- *ArStoreCreateAR) (event.Subscription, error) {

	logs, sub, err := _ArStore.contract.WatchLogs(opts, "CreateAR")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ArStoreCreateAR)
				if err := _ArStore.contract.UnpackLog(event, "CreateAR", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ArStoreDeleteValidAddressIterator is returned from FilterDeleteValidAddress and is used to iterate over the raw logs and unpacked data for DeleteValidAddress events raised by the ArStore contract.
type ArStoreDeleteValidAddressIterator struct {
	Event *ArStoreDeleteValidAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ArStoreDeleteValidAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArStoreDeleteValidAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ArStoreDeleteValidAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ArStoreDeleteValidAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ArStoreDeleteValidAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ArStoreDeleteValidAddress represents a DeleteValidAddress event raised by the ArStore contract.
type ArStoreDeleteValidAddress struct {
	InputAddress common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterDeleteValidAddress is a free log retrieval operation binding the contract event 0x5e5a76e40608b1afeb1f23102c29b95893963e9d64e803d2d7fa5604381525f1.
//
// Solidity: event DeleteValidAddress(inputAddress address)
func (_ArStore *ArStoreFilterer) FilterDeleteValidAddress(opts *bind.FilterOpts) (*ArStoreDeleteValidAddressIterator, error) {

	logs, sub, err := _ArStore.contract.FilterLogs(opts, "DeleteValidAddress")
	if err != nil {
		return nil, err
	}
	return &ArStoreDeleteValidAddressIterator{contract: _ArStore.contract, event: "DeleteValidAddress", logs: logs, sub: sub}, nil
}

// WatchDeleteValidAddress is a free log subscription operation binding the contract event 0x5e5a76e40608b1afeb1f23102c29b95893963e9d64e803d2d7fa5604381525f1.
//
// Solidity: event DeleteValidAddress(inputAddress address)
func (_ArStore *ArStoreFilterer) WatchDeleteValidAddress(opts *bind.WatchOpts, sink chan<- *ArStoreDeleteValidAddress) (event.Subscription, error) {

	logs, sub, err := _ArStore.contract.WatchLogs(opts, "DeleteValidAddress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ArStoreDeleteValidAddress)
				if err := _ArStore.contract.UnpackLog(event, "DeleteValidAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ArStoreRegisterUserIterator is returned from FilterRegisterUser and is used to iterate over the raw logs and unpacked data for RegisterUser events raised by the ArStore contract.
type ArStoreRegisterUserIterator struct {
	Event *ArStoreRegisterUser // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ArStoreRegisterUserIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ArStoreRegisterUser)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ArStoreRegisterUser)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ArStoreRegisterUserIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ArStoreRegisterUserIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ArStoreRegisterUser represents a RegisterUser event raised by the ArStore contract.
type ArStoreRegisterUser struct {
	UserId    *big.Int
	BcAccount string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRegisterUser is a free log retrieval operation binding the contract event 0x9874e7900655ffbb5f0695e6cc0651dddacda6f7b3a5d05857c11cf4bc5316de.
//
// Solidity: event RegisterUser(userId uint256, bcAccount string)
func (_ArStore *ArStoreFilterer) FilterRegisterUser(opts *bind.FilterOpts) (*ArStoreRegisterUserIterator, error) {

	logs, sub, err := _ArStore.contract.FilterLogs(opts, "RegisterUser")
	if err != nil {
		return nil, err
	}
	return &ArStoreRegisterUserIterator{contract: _ArStore.contract, event: "RegisterUser", logs: logs, sub: sub}, nil
}

// WatchRegisterUser is a free log subscription operation binding the contract event 0x9874e7900655ffbb5f0695e6cc0651dddacda6f7b3a5d05857c11cf4bc5316de.
//
// Solidity: event RegisterUser(userId uint256, bcAccount string)
func (_ArStore *ArStoreFilterer) WatchRegisterUser(opts *bind.WatchOpts, sink chan<- *ArStoreRegisterUser) (event.Subscription, error) {

	logs, sub, err := _ArStore.contract.WatchLogs(opts, "RegisterUser")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ArStoreRegisterUser)
				if err := _ArStore.contract.UnpackLog(event, "RegisterUser", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
